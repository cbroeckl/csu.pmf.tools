mz <- seq(from = min(centroids[,1])-0.5, max(centroids[,1])+0.5, 0.001)
centroids[,1]
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.001)
mz
?dnorm
int <- rep(0, length(mz))
centroids[[1]][i,1]
tmp <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = (resolution * 2.335)/centroids[[1]][i,1]
)
tmp
plot(tmp)
mz
i
centroids[[1]][i,1]
(resolution * 2.335)/centroids[[1]][i,1]
resolution
(resolution * 2.335)/centroids[[1]][i,1]
centroids[[1]][i,1]/(resolution * 2.335)
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
tmp.int
plot(tmp.int)
plot(tmp.int, type = "l")
int
sum(tmp.int)
centroids[[1]][i,1] * centroids[[1]][i,1]/sum(centroids[[1]][i,1])
centroids[[1]][i,1]
centroids[[1]][i,2]
centroids[[1]][i,1]
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
tmp.int
sum(tmp.int)
int <- tmp.int + int
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.001)
int <- rep(0, length(mz))
for(i in 1:nrow(centroids[[1]])) {
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
int <- tmp.int + int
}
int
plot(int, type = "l")
plot(mz, int, type = "l", ylim = c(196.06, 196.08), xlim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.06, 196.08), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.06, 196.09), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 196.095), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 196.099), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 197.05), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 2))
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 10)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
## centroid using MSW
library(MassSpecWavelet)
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 10)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
for (i in c(1, length(peakIndex))) {
points(c(peakIndex[i], peakIndex[i]), c(0, exampleMS[peakIndex[i]]),
col='red', type='l')
}
majorPeakInfo
my_scales <- seq(1, 20)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
for (i in c(1, length(peakIndex))) {
points(c(peakIndex[i], peakIndex[i]), c(0, int[peakIndex[i]]),
col='red', type='l')
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 2))
plot(mz, int, type = "l")
peakIndex[i]
peakIndex
mz[peakIndex]
points(mz[peakIndex], int[peakIndex], col='red', type='h')
## set m/z values at fixed interval (0.001)
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.003)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 3))
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 5))
## set m/z values at fixed interval (0.001)
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.002)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 5))
## set m/z values at fixed interval (0.001)
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.0005)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 5))
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 2))
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 1))
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 20)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
majorPeakInfo
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
centroided.ratio
centroids
original.ratio <- sum(centroids[2,2:5]) / centroids[1,2]
original.ratio <- sum(centroids[2:5,2]) / centroids[1,2]
centroids
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
original.ratio
centroided.ratio
centroids[[1]][2:5,2]
nrow(centroids[[1]]
)
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
}
## set m/z values at fixed interval
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.0005)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 1))
## centroid using MSW
library(MassSpecWavelet)
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 20)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
plot(mz, int, type = "l")
points(mz[peakIndex], int[peakIndex], col='red', type='h')
majorPeakInfo$peakValue[2]
majorPeakInfo$peakValue[1]
original.ratio <- sum(centroids[[1]][3:5,2]) / centroids[[1]][1,2]
original.ratio
centroids[1:6,1:4]
centroids[[1]][1:6,1:4]
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
original.ratio
sum(centroids[[1]][2:5,2])
centroids[[1]][2:5,2]
peakIndex
## set m/z values at fixed interval
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.0005)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
cat(i, int[3008], '\n')
}
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
original.ratio
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
centroided.ratio
majorPeakInfo$peakValue[1]
## set m/z values at fixed interval
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.0005)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
cat(centroids[[1]][1,i], int[3008], '\n')
}
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
cat(centroids[[1]][i,1], int[3008], '\n')
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 1))
## centroid using MSW
library(MassSpecWavelet)
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 20)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
plot(mz, int, type = "l")
points(mz[peakIndex], int[peakIndex], col='red', type='h')
int[peakIndex]
peakIndex
my_scales <- seq(1, 5)
peakInfo <- peakDetectionCWT(exampleMS, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
SNR.Th <- 5
nearbyPeak <- TRUE
library(enviPat)
data(isotopes)
centroids <- isopattern(
isotopes = isotopes,
chemforms = "C8H11N4O2",
threshold = 0.0001)
## set m/z values at fixed interval
mz <- seq(from = min(centroids[[1]][,1])-0.5, max(centroids[[1]][,1])+0.5, 0.0005)
## create empty intensity vector
int <- rep(0, length(mz))
## loop through each centroid
for(i in 1:nrow(centroids[[1]])) {
## create temp intensity for centroid i
tmp.int <- dnorm(x = mz,
mean = centroids[[1]][i,1],
sd = centroids[[1]][i,1]/(resolution * 2.335)
)
## scan intensity value such that the sum of all intentisties
## in tmp.int is equal to the centroid intensity
tmp.int <- centroids[[1]][i,2] * tmp.int/sum(tmp.int)
## add tmp.int to int
int <- tmp.int + int
cat(centroids[[1]][i,1], int[3008], '\n')
}
plot(mz, int, type = "l", xlim = c(196.075, 196.11), ylim = c(0, 1))
## centroid using MSW
library(MassSpecWavelet)
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 20)
my_scales <- seq(1, 5)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
plot(mz, int, type = "l")
points(mz[peakIndex], int[peakIndex], col='red', type='h')
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
centroided.ratio
original.ratio
centroids[[1]][i,1]/(resolution * 2.335)
majorPeakInfo$peakValue[2]*centroids[[1]][i,1]/(resolution * 2.335)
majorPeakInfo$peakValue[2]
majorPeakInfo$peakValue[1]* centroids[[1]][i,1]/(resolution * 2.335)
(majorPeakInfo$peakValue[2]*centroids[[1]][i,1]/(resolution * 2.335))
(majorPeakInfo$peakValue[2]*centroids[[1]][i,1]/(resolution * 2.335)) /
majorPeakInfo$peakValue[1]* centroids[[1]][i,1]/(resolution * 2.335)
centroided.ratio
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
centroided.ratio
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
## note that the intensity for the major peak of 196.09
## is the same as the intensity of at the peak center [3008]
int[peakIndex[2]]
majorPeakInfo
SNR.Th <- 5
nearbyPeak <- TRUE
my_scales <- seq(1, 40)
peakInfo <- peakDetectionCWT(int, scales=my_scales,
SNR.Th=SNR.Th, nearbyPeak=nearbyPeak)
majorPeakInfo = peakInfo$majorPeakInfo
peakIndex <- majorPeakInfo$peakIndex
plot(mz, int, type = "l")
points(mz[peakIndex], int[peakIndex], col='red', type='h')
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
## note that the intensity for the major peak of 196.09
## is the same as the intensity of at the peak center [3008]
int[peakIndex[2]]
majorPeakInfo
centroided.ratio.snr <- majorPeakInfo$peakSNR[2] / majorPeakInfo$peakSNR[1]
centroided.ratio.snr
original.ratio
centroided.ratio
m1 <- which(mz > 195.085 & mz <- 195.093)
m1 <- which(mz > 195.085 & mz < 195.093)
m1
plot(mz[m1], int[,1])
plot(mz[m1], int[m1])
m1 <- which(mz > 195.080 & mz < 195.095)
plot(mz[m1], int[m1], type = "l")
m1 <- which(mz > 195.080 & mz < 195.1)
plot(mz[m1], int[m1], type = "l")
m1 <- which(mz > 195.070 & mz < 195.1 & int > 0)
plot(mz[m1], int[m1], type = "l")
m1 <- which(mz > 195.070 & mz < 195.1 & int > 0.0001)
plot(mz[m1], int[m1], type = "l")
m1 <- which(mz > 195.070 & mz < 195.1 & int > 0.0001)
plot(mz[m1], int[m1], type = "l")
m2 <- which(mz > 196.050 & mz < 196.12 & int > 0.0001)
plot(mz[m1], int[m1], type = "l")
centroided.ratio <- sum(int[m2]) / sum(int[m1])
centroided.ratio
original.ratio
centroided.ratio.sum <- sum(int[m2]) / sum(int[m1])
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
centroided.ration.sum
original.ratio
centroided.ratio.sum
centroided.ratio <- majorPeakInfo$peakValue[2] / majorPeakInfo$peakValue[1]
original.ratio <- sum(centroids[[1]][2:5,2]) / centroids[[1]][1,2]
m1 <- which(mz > 195.070 & mz < 195.1 & int > 0.0001)
plot(mz[m1], int[m1], type = "l")
m2 <- which(mz > 196.050 & mz < 196.12 & int > 0.0001)
plot(mz[m1], int[m1], type = "l")
centroided.ratio.sum <- sum(int[m2]) / sum(int[m1])
centroided.ratio.sum
original.ratio
sub <- which(mz > 197.070 & mz < 197.12 & int > 0.0001)
sub <- which(mz > 197.070 & mz < 197.12 & int > 0.0001)
plot(mz[sub], int[sub], type = "l")
m3 <- which(mz > 197.070 & mz < 197.12 & int > 0.0001)
m3
m3
mz[m1]
new.mz <- seq(min(mz[m1]), max(mz[m1]), 0.00025)
approxfun(mz[m1], int[m2], xout = new.mz)
approx(mz[m1], int[m2], xout = new.mz)
approx(mz[m1], int[m2], xout = new.mz)
approx(mz[m1], int[m1], xout = new.mz)
new.int <- approx(mz[m1], int[m1], xout = new.mz)$y
plot(mz[m1], int[m1], type = "l")
points(new.mz, new.int, type = "l", col = 2)
weighted.mean(new.mz, new.int)
mz_err <- c(1230e9)
mz_err/43177
ExpDes = NULL
MStag="_01.mzML"
idMSMStag="_02.mzML"
filetype="mzML"
factorfile="seq.csv"
cores=4
minpw=3
maxpw=30
## find offending text... searches all non- .Rdata files in a directory and subdirectories
text.to.find = "No MS1 data found in file"
dir.to.search <- "C:/Users/cbroeckl/Documents/GitHub/csu.pmf.tools"
# dir.to.search <- "C:/Users/cbroeckl/xcms-master"
files.to.scan <- list.files(dir.to.search, recursive = TRUE, full.names = TRUE)
files.to.scan <- files.to.scan[!grepl(".Rdata", files.to.scan)]
for(i in 1:length(files.to.scan)) {
tmp <- readLines(files.to.scan[i])
mtchs <- grep(text.to.find, tmp, ignore.case = TRUE)
if(length(mtchs)>0) {
cat(files.to.scan[i], '\n')
cat("  line:", mtchs, '\n')
}
}
dir.to.search <- "C:/Users/cbroeckl/Documents/GitHub/xcms"
# dir.to.search <- "C:/Users/cbroeckl/xcms-master"
files.to.scan <- list.files(dir.to.search, recursive = TRUE, full.names = TRUE)
files.to.scan <- files.to.scan[!grepl(".Rdata", files.to.scan)]
for(i in 1:length(files.to.scan)) {
tmp <- readLines(files.to.scan[i])
mtchs <- grep(text.to.find, tmp, ignore.case = TRUE)
if(length(mtchs)>0) {
cat(files.to.scan[i], '\n')
cat("  line:", mtchs, '\n')
}
}
library(devtools)
install_github("cbroeckl/xcms", dependencies = FALSE, upgrade = "never")
detach('xcms')
detach('package::xcms')
detach('package:::xcms')
detach('package:xcms')
library(devtools)
install_github('cbroeckl/xcms', dependencies = TRUE, check.names = FALSE)
install_github('cbroeckl/xcms', dependencies = FALSE, update = 'never')
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::github_install("sneumann/xcms", ref = "jomaster")
install.packages("C:/Users/cbroeckl/Downloads/digest_0.6.25.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/cbroeckl/Downloads/digest_0.6.25.tar.gz", repos = NULL, type = "source")
devtools::github_install("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster", dependencies = FALSE)
devtools::install_github("sneumann/xcms", ref = "jomaster")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms")
devtools::install_github("sneumann/xcms", ref = "jomaster")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mzR")
devtools::install_github("sneumann/xcms", ref = "jomaster")
library(mzR)
devtools::install_github("sneumann/xcms", ref = "jomaster")
install_version("Rcpp", version = "1.0.2", repos = "http://cran.us.r-project.org")
devtools::install_version("Rcpp", version = "1.0.2", repos = "http://cran.us.r-project.org")
devtools::install_version("Rcpp", version = "1.0.2")
devtools::install_version("ggplot2", version = "1.0.2")
devtools::install_version("Rcpp", version = "1.0.2")
library(Rcpp)
install.packages("Rcpp")
devtools::install_version("Rcpp", version = "1.0.2")
devtools::install_version("Rcpp", version = "1.0.2", repos = "http://cran.us.r-project.org")
devtools::install_version("Rcpp", version = "1.0.2", repos = "http://cran.us.r-project.org")
devtools::install_version("Rcpp", version = "1.0.2")
?devtools::install_version
devtools::install_version('Rcpp', version = "1.0.2")
setwd("~/GitHub/csu.pmf.tools")
install.packages("roxygen2")
install.packages("devtools")
install.packages("knitr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms")
